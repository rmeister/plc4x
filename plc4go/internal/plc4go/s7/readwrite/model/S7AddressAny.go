//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
package model

import (
	"encoding/xml"
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
	"github.com/rs/zerolog/log"
	"io"
)

// Code generated by build-utils. DO NOT EDIT.

// The data-structure of this message
type S7AddressAny struct {
	TransportSize    TransportSize
	NumberOfElements uint16
	DbNumber         uint16
	Area             MemoryArea
	ByteAddress      uint16
	BitAddress       uint8
	Parent           *S7Address
}

// The corresponding interface
type IS7AddressAny interface {
	LengthInBytes() uint16
	LengthInBits() uint16
	Serialize(io utils.WriteBuffer) error
	xml.Marshaler
	xml.Unmarshaler
}

///////////////////////////////////////////////////////////
// Accessors for discriminator values.
///////////////////////////////////////////////////////////
func (m *S7AddressAny) AddressType() uint8 {
	return 0x10
}

func (m *S7AddressAny) InitializeParent(parent *S7Address) {
}

func NewS7AddressAny(transportSize TransportSize, numberOfElements uint16, dbNumber uint16, area MemoryArea, byteAddress uint16, bitAddress uint8) *S7Address {
	child := &S7AddressAny{
		TransportSize:    transportSize,
		NumberOfElements: numberOfElements,
		DbNumber:         dbNumber,
		Area:             area,
		ByteAddress:      byteAddress,
		BitAddress:       bitAddress,
		Parent:           NewS7Address(),
	}
	child.Parent.Child = child
	return child.Parent
}

func CastS7AddressAny(structType interface{}) *S7AddressAny {
	castFunc := func(typ interface{}) *S7AddressAny {
		if casted, ok := typ.(S7AddressAny); ok {
			return &casted
		}
		if casted, ok := typ.(*S7AddressAny); ok {
			return casted
		}
		if casted, ok := typ.(S7Address); ok {
			return CastS7AddressAny(casted.Child)
		}
		if casted, ok := typ.(*S7Address); ok {
			return CastS7AddressAny(casted.Child)
		}
		return nil
	}
	return castFunc(structType)
}

func (m *S7AddressAny) GetTypeName() string {
	return "S7AddressAny"
}

func (m *S7AddressAny) LengthInBits() uint16 {
	return m.LengthInBitsConditional(false)
}

func (m *S7AddressAny) LengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.Parent.ParentLengthInBits())

	// Enum Field (transportSize)
	lengthInBits += 8

	// Simple field (numberOfElements)
	lengthInBits += 16

	// Simple field (dbNumber)
	lengthInBits += 16

	// Enum Field (area)
	lengthInBits += 8

	// Reserved Field (reserved)
	lengthInBits += 5

	// Simple field (byteAddress)
	lengthInBits += 16

	// Simple field (bitAddress)
	lengthInBits += 3

	return lengthInBits
}

func (m *S7AddressAny) LengthInBytes() uint16 {
	return m.LengthInBits() / 8
}

func S7AddressAnyParse(io *utils.ReadBuffer) (*S7Address, error) {

	// Enum field (transportSize)
	transportSizeCode, _transportSizeErr := io.ReadUint8(8)
	var transportSize TransportSize
	for _, value := range TransportSizeValues {
		if value.Code() == transportSizeCode {
			transportSize = value
			break
		}
	}
	if _transportSizeErr != nil {
		return nil, errors.Wrap(_transportSizeErr, "Error parsing 'transportSize' field")
	}

	// Simple Field (numberOfElements)
	numberOfElements, _numberOfElementsErr := io.ReadUint16(16)
	if _numberOfElementsErr != nil {
		return nil, errors.Wrap(_numberOfElementsErr, "Error parsing 'numberOfElements' field")
	}

	// Simple Field (dbNumber)
	dbNumber, _dbNumberErr := io.ReadUint16(16)
	if _dbNumberErr != nil {
		return nil, errors.Wrap(_dbNumberErr, "Error parsing 'dbNumber' field")
	}

	// Enum field (area)
	area, _areaErr := MemoryAreaParse(io)
	if _areaErr != nil {
		return nil, errors.Wrap(_areaErr, "Error parsing 'area' field")
	}

	// Reserved Field (Compartmentalized so the "reserved" variable can't leak)
	{
		reserved, _err := io.ReadUint8(5)
		if _err != nil {
			return nil, errors.Wrap(_err, "Error parsing 'reserved' field")
		}
		if reserved != uint8(0x00) {
			log.Info().Fields(map[string]interface{}{
				"expected value": uint8(0x00),
				"got value":      reserved,
			}).Msg("Got unexpected response.")
		}
	}

	// Simple Field (byteAddress)
	byteAddress, _byteAddressErr := io.ReadUint16(16)
	if _byteAddressErr != nil {
		return nil, errors.Wrap(_byteAddressErr, "Error parsing 'byteAddress' field")
	}

	// Simple Field (bitAddress)
	bitAddress, _bitAddressErr := io.ReadUint8(3)
	if _bitAddressErr != nil {
		return nil, errors.Wrap(_bitAddressErr, "Error parsing 'bitAddress' field")
	}

	// Create a partially initialized instance
	_child := &S7AddressAny{
		TransportSize:    transportSize,
		NumberOfElements: numberOfElements,
		DbNumber:         dbNumber,
		Area:             area,
		ByteAddress:      byteAddress,
		BitAddress:       bitAddress,
		Parent:           &S7Address{},
	}
	_child.Parent.Child = _child
	return _child.Parent, nil
}

func (m *S7AddressAny) Serialize(io utils.WriteBuffer) error {
	ser := func() error {

		// Enum field (transportSize)
		_transportSizeErr := io.WriteUint8(8, m.TransportSize.Code())
		if _transportSizeErr != nil {
			return errors.Wrap(_transportSizeErr, "Error serializing 'transportSize' field")
		}

		// Simple Field (numberOfElements)
		numberOfElements := uint16(m.NumberOfElements)
		_numberOfElementsErr := io.WriteUint16(16, (numberOfElements))
		if _numberOfElementsErr != nil {
			return errors.Wrap(_numberOfElementsErr, "Error serializing 'numberOfElements' field")
		}

		// Simple Field (dbNumber)
		dbNumber := uint16(m.DbNumber)
		_dbNumberErr := io.WriteUint16(16, (dbNumber))
		if _dbNumberErr != nil {
			return errors.Wrap(_dbNumberErr, "Error serializing 'dbNumber' field")
		}

		// Enum field (area)
		area := CastMemoryArea(m.Area)
		_areaErr := area.Serialize(io)
		if _areaErr != nil {
			return errors.Wrap(_areaErr, "Error serializing 'area' field")
		}

		// Reserved Field (reserved)
		{
			_err := io.WriteUint8(5, uint8(0x00))
			if _err != nil {
				return errors.Wrap(_err, "Error serializing 'reserved' field")
			}
		}

		// Simple Field (byteAddress)
		byteAddress := uint16(m.ByteAddress)
		_byteAddressErr := io.WriteUint16(16, (byteAddress))
		if _byteAddressErr != nil {
			return errors.Wrap(_byteAddressErr, "Error serializing 'byteAddress' field")
		}

		// Simple Field (bitAddress)
		bitAddress := uint8(m.BitAddress)
		_bitAddressErr := io.WriteUint8(3, (bitAddress))
		if _bitAddressErr != nil {
			return errors.Wrap(_bitAddressErr, "Error serializing 'bitAddress' field")
		}

		return nil
	}
	return m.Parent.SerializeParent(io, m, ser)
}

func (m *S7AddressAny) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var token xml.Token
	var err error
	foundContent := false
	token = start
	for {
		switch token.(type) {
		case xml.StartElement:
			foundContent = true
			tok := token.(xml.StartElement)
			switch tok.Name.Local {
			case "transportSize":
				var data TransportSize
				if err := d.DecodeElement(&data, &tok); err != nil {
					return err
				}
				m.TransportSize = data
			case "numberOfElements":
				var data uint16
				if err := d.DecodeElement(&data, &tok); err != nil {
					return err
				}
				m.NumberOfElements = data
			case "dbNumber":
				var data uint16
				if err := d.DecodeElement(&data, &tok); err != nil {
					return err
				}
				m.DbNumber = data
			case "area":
				var data MemoryArea
				if err := d.DecodeElement(&data, &tok); err != nil {
					return err
				}
				m.Area = data
			case "byteAddress":
				var data uint16
				if err := d.DecodeElement(&data, &tok); err != nil {
					return err
				}
				m.ByteAddress = data
			case "bitAddress":
				var data uint8
				if err := d.DecodeElement(&data, &tok); err != nil {
					return err
				}
				m.BitAddress = data
			}
		}
		token, err = d.Token()
		if err != nil {
			if err == io.EOF && foundContent {
				return nil
			}
			return err
		}
	}
}

func (m *S7AddressAny) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if err := e.EncodeElement(m.TransportSize, xml.StartElement{Name: xml.Name{Local: "transportSize"}}); err != nil {
		return err
	}
	if err := e.EncodeElement(m.NumberOfElements, xml.StartElement{Name: xml.Name{Local: "numberOfElements"}}); err != nil {
		return err
	}
	if err := e.EncodeElement(m.DbNumber, xml.StartElement{Name: xml.Name{Local: "dbNumber"}}); err != nil {
		return err
	}
	if err := e.EncodeElement(m.Area, xml.StartElement{Name: xml.Name{Local: "area"}}); err != nil {
		return err
	}
	if err := e.EncodeElement(m.ByteAddress, xml.StartElement{Name: xml.Name{Local: "byteAddress"}}); err != nil {
		return err
	}
	if err := e.EncodeElement(m.BitAddress, xml.StartElement{Name: xml.Name{Local: "bitAddress"}}); err != nil {
		return err
	}
	return nil
}

func (m S7AddressAny) String() string {
	return string(m.Box("S7AddressAny", utils.DefaultWidth*2))
}

func (m S7AddressAny) Box(name string, width int) utils.AsciiBox {
	if name == "" {
		name = "S7AddressAny"
	}
	boxes := make([]utils.AsciiBox, 0)
	boxes = append(boxes, utils.BoxAnything("TransportSize", m.TransportSize, width-2))
	boxes = append(boxes, utils.BoxAnything("NumberOfElements", m.NumberOfElements, width-2))
	boxes = append(boxes, utils.BoxAnything("DbNumber", m.DbNumber, width-2))
	boxes = append(boxes, utils.BoxAnything("Area", m.Area, width-2))
	boxes = append(boxes, utils.BoxAnything("ByteAddress", m.ByteAddress, width-2))
	boxes = append(boxes, utils.BoxAnything("BitAddress", m.BitAddress, width-2))
	return utils.BoxBox(name, utils.AlignBoxes(boxes, width-2), 0)
}
