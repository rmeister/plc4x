//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
package model

import (
	"encoding/xml"
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
	"io"
	"reflect"
	"strings"
)

// Code generated by build-utils. DO NOT EDIT.

// The data-structure of this message
type APDU struct {
	Child IAPDUChild
}

// The corresponding interface
type IAPDU interface {
	ApduType() uint8
	LengthInBytes() uint16
	LengthInBits() uint16
	Serialize(io utils.WriteBuffer) error
	xml.Marshaler
	xml.Unmarshaler
}

type IAPDUParent interface {
	SerializeParent(io utils.WriteBuffer, child IAPDU, serializeChildFunction func() error) error
	GetTypeName() string
}

type IAPDUChild interface {
	Serialize(io utils.WriteBuffer) error
	InitializeParent(parent *APDU)
	GetTypeName() string
	IAPDU
}

func NewAPDU() *APDU {
	return &APDU{}
}

func CastAPDU(structType interface{}) *APDU {
	castFunc := func(typ interface{}) *APDU {
		if casted, ok := typ.(APDU); ok {
			return &casted
		}
		if casted, ok := typ.(*APDU); ok {
			return casted
		}
		return nil
	}
	return castFunc(structType)
}

func (m *APDU) GetTypeName() string {
	return "APDU"
}

func (m *APDU) LengthInBits() uint16 {
	return m.LengthInBitsConditional(false)
}

func (m *APDU) LengthInBitsConditional(lastItem bool) uint16 {
	return m.Child.LengthInBits()
}

func (m *APDU) ParentLengthInBits() uint16 {
	lengthInBits := uint16(0)
	// Discriminator Field (apduType)
	lengthInBits += 4

	return lengthInBits
}

func (m *APDU) LengthInBytes() uint16 {
	return m.LengthInBits() / 8
}

func APDUParse(io *utils.ReadBuffer, apduLength uint16) (*APDU, error) {

	// Discriminator Field (apduType) (Used as input to a switch field)
	apduType, _apduTypeErr := io.ReadUint8(4)
	if _apduTypeErr != nil {
		return nil, errors.Wrap(_apduTypeErr, "Error parsing 'apduType' field")
	}

	// Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
	var _parent *APDU
	var typeSwitchError error
	switch {
	case apduType == 0x0: // APDUConfirmedRequest
		_parent, typeSwitchError = APDUConfirmedRequestParse(io, apduLength)
	case apduType == 0x1: // APDUUnconfirmedRequest
		_parent, typeSwitchError = APDUUnconfirmedRequestParse(io, apduLength)
	case apduType == 0x2: // APDUSimpleAck
		_parent, typeSwitchError = APDUSimpleAckParse(io)
	case apduType == 0x3: // APDUComplexAck
		_parent, typeSwitchError = APDUComplexAckParse(io)
	case apduType == 0x4: // APDUSegmentAck
		_parent, typeSwitchError = APDUSegmentAckParse(io)
	case apduType == 0x5: // APDUError
		_parent, typeSwitchError = APDUErrorParse(io)
	case apduType == 0x6: // APDUReject
		_parent, typeSwitchError = APDURejectParse(io)
	case apduType == 0x7: // APDUAbort
		_parent, typeSwitchError = APDUAbortParse(io)
	default:
		// TODO: return actual type
		typeSwitchError = errors.New("Unmapped type")
	}
	if typeSwitchError != nil {
		return nil, errors.Wrap(typeSwitchError, "Error parsing sub-type for type-switch.")
	}

	// Finish initializing
	_parent.Child.InitializeParent(_parent)
	return _parent, nil
}

func (m *APDU) Serialize(io utils.WriteBuffer) error {
	return m.Child.Serialize(io)
}

func (m *APDU) SerializeParent(io utils.WriteBuffer, child IAPDU, serializeChildFunction func() error) error {

	// Discriminator Field (apduType) (Used as input to a switch field)
	apduType := uint8(child.ApduType())
	_apduTypeErr := io.WriteUint8(4, (apduType))

	if _apduTypeErr != nil {
		return errors.Wrap(_apduTypeErr, "Error serializing 'apduType' field")
	}

	// Switch field (Depending on the discriminator values, passes the serialization to a sub-type)
	_typeSwitchErr := serializeChildFunction()
	if _typeSwitchErr != nil {
		return errors.Wrap(_typeSwitchErr, "Error serializing sub-type field")
	}

	return nil
}

func (m *APDU) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var token xml.Token
	var err error
	foundContent := false
	if start.Attr != nil && len(start.Attr) > 0 {
		switch start.Attr[0].Value {
		}
	}
	for {
		token, err = d.Token()
		if err != nil {
			if err == io.EOF && foundContent {
				return nil
			}
			return err
		}
		switch token.(type) {
		case xml.StartElement:
			foundContent = true
			tok := token.(xml.StartElement)
			switch tok.Name.Local {
			default:
				attr := start.Attr
				if attr == nil || len(attr) <= 0 {
					// TODO: workaround for bug with nested lists
					attr = tok.Attr
				}
				if attr == nil || len(attr) <= 0 {
					panic("Couldn't determine class type for childs of APDU")
				}
				switch attr[0].Value {
				case "org.apache.plc4x.java.bacnetip.readwrite.APDUConfirmedRequest":
					var dt *APDUConfirmedRequest
					if m.Child != nil {
						dt = m.Child.(*APDUConfirmedRequest)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.bacnetip.readwrite.APDUUnconfirmedRequest":
					var dt *APDUUnconfirmedRequest
					if m.Child != nil {
						dt = m.Child.(*APDUUnconfirmedRequest)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.bacnetip.readwrite.APDUSimpleAck":
					var dt *APDUSimpleAck
					if m.Child != nil {
						dt = m.Child.(*APDUSimpleAck)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.bacnetip.readwrite.APDUComplexAck":
					var dt *APDUComplexAck
					if m.Child != nil {
						dt = m.Child.(*APDUComplexAck)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.bacnetip.readwrite.APDUSegmentAck":
					var dt *APDUSegmentAck
					if m.Child != nil {
						dt = m.Child.(*APDUSegmentAck)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.bacnetip.readwrite.APDUError":
					var dt *APDUError
					if m.Child != nil {
						dt = m.Child.(*APDUError)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.bacnetip.readwrite.APDUReject":
					var dt *APDUReject
					if m.Child != nil {
						dt = m.Child.(*APDUReject)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.bacnetip.readwrite.APDUAbort":
					var dt *APDUAbort
					if m.Child != nil {
						dt = m.Child.(*APDUAbort)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				}
			}
		}
	}
}

func (m *APDU) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	className := reflect.TypeOf(m.Child).String()
	className = "org.apache.plc4x.java.bacnetip.readwrite." + className[strings.LastIndex(className, ".")+1:]
	if err := e.EncodeToken(xml.StartElement{Name: start.Name, Attr: []xml.Attr{
		{Name: xml.Name{Local: "className"}, Value: className},
	}}); err != nil {
		return err
	}
	marshaller, ok := m.Child.(xml.Marshaler)
	if !ok {
		return errors.Errorf("child is not castable to Marshaler. Actual type %T", m.Child)
	}
	if err := marshaller.MarshalXML(e, start); err != nil {
		return err
	}
	if err := e.EncodeToken(xml.EndElement{Name: start.Name}); err != nil {
		return err
	}
	return nil
}

func (m APDU) String() string {
	return string(m.Box("APDU", utils.DefaultWidth*2))
}

func (m APDU) Box(name string, width int) utils.AsciiBox {
	if name == "" {
		name = "APDU"
	}
	boxes := make([]utils.AsciiBox, 0)
	boxes = append(boxes, utils.BoxAnything("", m.Child, width-2))
	return utils.BoxBox(name, utils.AlignBoxes(boxes, width-2), 0)
}
