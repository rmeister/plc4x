//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
package model

import (
	"encoding/xml"
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
	"io"
	"reflect"
	"strings"
)

// Code generated by build-utils. DO NOT EDIT.

// The data-structure of this message
type BACnetServiceAck struct {
	Child IBACnetServiceAckChild
}

// The corresponding interface
type IBACnetServiceAck interface {
	ServiceChoice() uint8
	LengthInBytes() uint16
	LengthInBits() uint16
	Serialize(io utils.WriteBuffer) error
	xml.Marshaler
	xml.Unmarshaler
}

type IBACnetServiceAckParent interface {
	SerializeParent(io utils.WriteBuffer, child IBACnetServiceAck, serializeChildFunction func() error) error
	GetTypeName() string
}

type IBACnetServiceAckChild interface {
	Serialize(io utils.WriteBuffer) error
	InitializeParent(parent *BACnetServiceAck)
	GetTypeName() string
	IBACnetServiceAck
}

func NewBACnetServiceAck() *BACnetServiceAck {
	return &BACnetServiceAck{}
}

func CastBACnetServiceAck(structType interface{}) *BACnetServiceAck {
	castFunc := func(typ interface{}) *BACnetServiceAck {
		if casted, ok := typ.(BACnetServiceAck); ok {
			return &casted
		}
		if casted, ok := typ.(*BACnetServiceAck); ok {
			return casted
		}
		return nil
	}
	return castFunc(structType)
}

func (m *BACnetServiceAck) GetTypeName() string {
	return "BACnetServiceAck"
}

func (m *BACnetServiceAck) LengthInBits() uint16 {
	return m.LengthInBitsConditional(false)
}

func (m *BACnetServiceAck) LengthInBitsConditional(lastItem bool) uint16 {
	return m.Child.LengthInBits()
}

func (m *BACnetServiceAck) ParentLengthInBits() uint16 {
	lengthInBits := uint16(0)
	// Discriminator Field (serviceChoice)
	lengthInBits += 8

	return lengthInBits
}

func (m *BACnetServiceAck) LengthInBytes() uint16 {
	return m.LengthInBits() / 8
}

func BACnetServiceAckParse(io *utils.ReadBuffer) (*BACnetServiceAck, error) {

	// Discriminator Field (serviceChoice) (Used as input to a switch field)
	serviceChoice, _serviceChoiceErr := io.ReadUint8(8)
	if _serviceChoiceErr != nil {
		return nil, errors.Wrap(_serviceChoiceErr, "Error parsing 'serviceChoice' field")
	}

	// Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
	var _parent *BACnetServiceAck
	var typeSwitchError error
	switch {
	case serviceChoice == 0x03: // BACnetServiceAckGetAlarmSummary
		_parent, typeSwitchError = BACnetServiceAckGetAlarmSummaryParse(io)
	case serviceChoice == 0x04: // BACnetServiceAckGetEnrollmentSummary
		_parent, typeSwitchError = BACnetServiceAckGetEnrollmentSummaryParse(io)
	case serviceChoice == 0x1D: // BACnetServiceAckGetEventInformation
		_parent, typeSwitchError = BACnetServiceAckGetEventInformationParse(io)
	case serviceChoice == 0x06: // BACnetServiceAckAtomicReadFile
		_parent, typeSwitchError = BACnetServiceAckAtomicReadFileParse(io)
	case serviceChoice == 0x07: // BACnetServiceAckAtomicWriteFile
		_parent, typeSwitchError = BACnetServiceAckAtomicWriteFileParse(io)
	case serviceChoice == 0x0A: // BACnetServiceAckCreateObject
		_parent, typeSwitchError = BACnetServiceAckCreateObjectParse(io)
	case serviceChoice == 0x0C: // BACnetServiceAckReadProperty
		_parent, typeSwitchError = BACnetServiceAckReadPropertyParse(io)
	case serviceChoice == 0x0E: // BACnetServiceAckReadPropertyMultiple
		_parent, typeSwitchError = BACnetServiceAckReadPropertyMultipleParse(io)
	case serviceChoice == 0x1A: // BACnetServiceAckReadRange
		_parent, typeSwitchError = BACnetServiceAckReadRangeParse(io)
	case serviceChoice == 0x12: // BACnetServiceAckConfirmedPrivateTransfer
		_parent, typeSwitchError = BACnetServiceAckConfirmedPrivateTransferParse(io)
	case serviceChoice == 0x15: // BACnetServiceAckVTOpen
		_parent, typeSwitchError = BACnetServiceAckVTOpenParse(io)
	case serviceChoice == 0x17: // BACnetServiceAckVTData
		_parent, typeSwitchError = BACnetServiceAckVTDataParse(io)
	case serviceChoice == 0x18: // BACnetServiceAckRemovedAuthenticate
		_parent, typeSwitchError = BACnetServiceAckRemovedAuthenticateParse(io)
	case serviceChoice == 0x0D: // BACnetServiceAckRemovedReadPropertyConditional
		_parent, typeSwitchError = BACnetServiceAckRemovedReadPropertyConditionalParse(io)
	default:
		// TODO: return actual type
		typeSwitchError = errors.New("Unmapped type")
	}
	if typeSwitchError != nil {
		return nil, errors.Wrap(typeSwitchError, "Error parsing sub-type for type-switch.")
	}

	// Finish initializing
	_parent.Child.InitializeParent(_parent)
	return _parent, nil
}

func (m *BACnetServiceAck) Serialize(io utils.WriteBuffer) error {
	return m.Child.Serialize(io)
}

func (m *BACnetServiceAck) SerializeParent(io utils.WriteBuffer, child IBACnetServiceAck, serializeChildFunction func() error) error {

	// Discriminator Field (serviceChoice) (Used as input to a switch field)
	serviceChoice := uint8(child.ServiceChoice())
	_serviceChoiceErr := io.WriteUint8(8, (serviceChoice))

	if _serviceChoiceErr != nil {
		return errors.Wrap(_serviceChoiceErr, "Error serializing 'serviceChoice' field")
	}

	// Switch field (Depending on the discriminator values, passes the serialization to a sub-type)
	_typeSwitchErr := serializeChildFunction()
	if _typeSwitchErr != nil {
		return errors.Wrap(_typeSwitchErr, "Error serializing sub-type field")
	}

	return nil
}

func (m *BACnetServiceAck) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var token xml.Token
	var err error
	foundContent := false
	if start.Attr != nil && len(start.Attr) > 0 {
		switch start.Attr[0].Value {
		// BACnetServiceAckGetAlarmSummary needs special treatment as it has no fields
		case "org.apache.plc4x.java.bacnetip.readwrite.BACnetServiceAckGetAlarmSummary":
			if m.Child == nil {
				m.Child = &BACnetServiceAckGetAlarmSummary{
					Parent: m,
				}
			}
		// BACnetServiceAckGetEnrollmentSummary needs special treatment as it has no fields
		case "org.apache.plc4x.java.bacnetip.readwrite.BACnetServiceAckGetEnrollmentSummary":
			if m.Child == nil {
				m.Child = &BACnetServiceAckGetEnrollmentSummary{
					Parent: m,
				}
			}
		// BACnetServiceAckGetEventInformation needs special treatment as it has no fields
		case "org.apache.plc4x.java.bacnetip.readwrite.BACnetServiceAckGetEventInformation":
			if m.Child == nil {
				m.Child = &BACnetServiceAckGetEventInformation{
					Parent: m,
				}
			}
		// BACnetServiceAckAtomicReadFile needs special treatment as it has no fields
		case "org.apache.plc4x.java.bacnetip.readwrite.BACnetServiceAckAtomicReadFile":
			if m.Child == nil {
				m.Child = &BACnetServiceAckAtomicReadFile{
					Parent: m,
				}
			}
		// BACnetServiceAckAtomicWriteFile needs special treatment as it has no fields
		case "org.apache.plc4x.java.bacnetip.readwrite.BACnetServiceAckAtomicWriteFile":
			if m.Child == nil {
				m.Child = &BACnetServiceAckAtomicWriteFile{
					Parent: m,
				}
			}
		// BACnetServiceAckCreateObject needs special treatment as it has no fields
		case "org.apache.plc4x.java.bacnetip.readwrite.BACnetServiceAckCreateObject":
			if m.Child == nil {
				m.Child = &BACnetServiceAckCreateObject{
					Parent: m,
				}
			}
		// BACnetServiceAckReadPropertyMultiple needs special treatment as it has no fields
		case "org.apache.plc4x.java.bacnetip.readwrite.BACnetServiceAckReadPropertyMultiple":
			if m.Child == nil {
				m.Child = &BACnetServiceAckReadPropertyMultiple{
					Parent: m,
				}
			}
		// BACnetServiceAckReadRange needs special treatment as it has no fields
		case "org.apache.plc4x.java.bacnetip.readwrite.BACnetServiceAckReadRange":
			if m.Child == nil {
				m.Child = &BACnetServiceAckReadRange{
					Parent: m,
				}
			}
		// BACnetServiceAckConfirmedPrivateTransfer needs special treatment as it has no fields
		case "org.apache.plc4x.java.bacnetip.readwrite.BACnetServiceAckConfirmedPrivateTransfer":
			if m.Child == nil {
				m.Child = &BACnetServiceAckConfirmedPrivateTransfer{
					Parent: m,
				}
			}
		// BACnetServiceAckVTOpen needs special treatment as it has no fields
		case "org.apache.plc4x.java.bacnetip.readwrite.BACnetServiceAckVTOpen":
			if m.Child == nil {
				m.Child = &BACnetServiceAckVTOpen{
					Parent: m,
				}
			}
		// BACnetServiceAckVTData needs special treatment as it has no fields
		case "org.apache.plc4x.java.bacnetip.readwrite.BACnetServiceAckVTData":
			if m.Child == nil {
				m.Child = &BACnetServiceAckVTData{
					Parent: m,
				}
			}
		// BACnetServiceAckRemovedAuthenticate needs special treatment as it has no fields
		case "org.apache.plc4x.java.bacnetip.readwrite.BACnetServiceAckRemovedAuthenticate":
			if m.Child == nil {
				m.Child = &BACnetServiceAckRemovedAuthenticate{
					Parent: m,
				}
			}
		// BACnetServiceAckRemovedReadPropertyConditional needs special treatment as it has no fields
		case "org.apache.plc4x.java.bacnetip.readwrite.BACnetServiceAckRemovedReadPropertyConditional":
			if m.Child == nil {
				m.Child = &BACnetServiceAckRemovedReadPropertyConditional{
					Parent: m,
				}
			}
		}
	}
	for {
		token, err = d.Token()
		if err != nil {
			if err == io.EOF && foundContent {
				return nil
			}
			return err
		}
		switch token.(type) {
		case xml.StartElement:
			foundContent = true
			tok := token.(xml.StartElement)
			switch tok.Name.Local {
			default:
				attr := start.Attr
				if attr == nil || len(attr) <= 0 {
					// TODO: workaround for bug with nested lists
					attr = tok.Attr
				}
				if attr == nil || len(attr) <= 0 {
					panic("Couldn't determine class type for childs of BACnetServiceAck")
				}
				switch attr[0].Value {
				case "org.apache.plc4x.java.bacnetip.readwrite.BACnetServiceAckGetAlarmSummary":
					var dt *BACnetServiceAckGetAlarmSummary
					if m.Child != nil {
						dt = m.Child.(*BACnetServiceAckGetAlarmSummary)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.bacnetip.readwrite.BACnetServiceAckGetEnrollmentSummary":
					var dt *BACnetServiceAckGetEnrollmentSummary
					if m.Child != nil {
						dt = m.Child.(*BACnetServiceAckGetEnrollmentSummary)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.bacnetip.readwrite.BACnetServiceAckGetEventInformation":
					var dt *BACnetServiceAckGetEventInformation
					if m.Child != nil {
						dt = m.Child.(*BACnetServiceAckGetEventInformation)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.bacnetip.readwrite.BACnetServiceAckAtomicReadFile":
					var dt *BACnetServiceAckAtomicReadFile
					if m.Child != nil {
						dt = m.Child.(*BACnetServiceAckAtomicReadFile)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.bacnetip.readwrite.BACnetServiceAckAtomicWriteFile":
					var dt *BACnetServiceAckAtomicWriteFile
					if m.Child != nil {
						dt = m.Child.(*BACnetServiceAckAtomicWriteFile)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.bacnetip.readwrite.BACnetServiceAckCreateObject":
					var dt *BACnetServiceAckCreateObject
					if m.Child != nil {
						dt = m.Child.(*BACnetServiceAckCreateObject)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.bacnetip.readwrite.BACnetServiceAckReadProperty":
					var dt *BACnetServiceAckReadProperty
					if m.Child != nil {
						dt = m.Child.(*BACnetServiceAckReadProperty)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.bacnetip.readwrite.BACnetServiceAckReadPropertyMultiple":
					var dt *BACnetServiceAckReadPropertyMultiple
					if m.Child != nil {
						dt = m.Child.(*BACnetServiceAckReadPropertyMultiple)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.bacnetip.readwrite.BACnetServiceAckReadRange":
					var dt *BACnetServiceAckReadRange
					if m.Child != nil {
						dt = m.Child.(*BACnetServiceAckReadRange)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.bacnetip.readwrite.BACnetServiceAckConfirmedPrivateTransfer":
					var dt *BACnetServiceAckConfirmedPrivateTransfer
					if m.Child != nil {
						dt = m.Child.(*BACnetServiceAckConfirmedPrivateTransfer)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.bacnetip.readwrite.BACnetServiceAckVTOpen":
					var dt *BACnetServiceAckVTOpen
					if m.Child != nil {
						dt = m.Child.(*BACnetServiceAckVTOpen)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.bacnetip.readwrite.BACnetServiceAckVTData":
					var dt *BACnetServiceAckVTData
					if m.Child != nil {
						dt = m.Child.(*BACnetServiceAckVTData)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.bacnetip.readwrite.BACnetServiceAckRemovedAuthenticate":
					var dt *BACnetServiceAckRemovedAuthenticate
					if m.Child != nil {
						dt = m.Child.(*BACnetServiceAckRemovedAuthenticate)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.bacnetip.readwrite.BACnetServiceAckRemovedReadPropertyConditional":
					var dt *BACnetServiceAckRemovedReadPropertyConditional
					if m.Child != nil {
						dt = m.Child.(*BACnetServiceAckRemovedReadPropertyConditional)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				}
			}
		}
	}
}

func (m *BACnetServiceAck) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	className := reflect.TypeOf(m.Child).String()
	className = "org.apache.plc4x.java.bacnetip.readwrite." + className[strings.LastIndex(className, ".")+1:]
	if err := e.EncodeToken(xml.StartElement{Name: start.Name, Attr: []xml.Attr{
		{Name: xml.Name{Local: "className"}, Value: className},
	}}); err != nil {
		return err
	}
	marshaller, ok := m.Child.(xml.Marshaler)
	if !ok {
		return errors.Errorf("child is not castable to Marshaler. Actual type %T", m.Child)
	}
	if err := marshaller.MarshalXML(e, start); err != nil {
		return err
	}
	if err := e.EncodeToken(xml.EndElement{Name: start.Name}); err != nil {
		return err
	}
	return nil
}

func (m BACnetServiceAck) String() string {
	return string(m.Box("BACnetServiceAck", utils.DefaultWidth*2))
}

func (m BACnetServiceAck) Box(name string, width int) utils.AsciiBox {
	if name == "" {
		name = "BACnetServiceAck"
	}
	boxes := make([]utils.AsciiBox, 0)
	boxes = append(boxes, utils.BoxAnything("", m.Child, width-2))
	return utils.BoxBox(name, utils.AlignBoxes(boxes, width-2), 0)
}
