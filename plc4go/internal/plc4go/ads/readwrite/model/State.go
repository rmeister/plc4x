//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
package model

import (
	"encoding/xml"
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
	"github.com/rs/zerolog/log"
	"io"
)

// Code generated by build-utils. DO NOT EDIT.

// The data-structure of this message
type State struct {
	InitCommand         bool
	UpdCommand          bool
	TimestampAdded      bool
	HighPriorityCommand bool
	SystemCommand       bool
	AdsCommand          bool
	NoReturn            bool
	Response            bool
	Broadcast           bool
}

// The corresponding interface
type IState interface {
	LengthInBytes() uint16
	LengthInBits() uint16
	Serialize(io utils.WriteBuffer) error
	xml.Marshaler
	xml.Unmarshaler
}

func NewState(initCommand bool, updCommand bool, timestampAdded bool, highPriorityCommand bool, systemCommand bool, adsCommand bool, noReturn bool, response bool, broadcast bool) *State {
	return &State{InitCommand: initCommand, UpdCommand: updCommand, TimestampAdded: timestampAdded, HighPriorityCommand: highPriorityCommand, SystemCommand: systemCommand, AdsCommand: adsCommand, NoReturn: noReturn, Response: response, Broadcast: broadcast}
}

func CastState(structType interface{}) *State {
	castFunc := func(typ interface{}) *State {
		if casted, ok := typ.(State); ok {
			return &casted
		}
		if casted, ok := typ.(*State); ok {
			return casted
		}
		return nil
	}
	return castFunc(structType)
}

func (m *State) GetTypeName() string {
	return "State"
}

func (m *State) LengthInBits() uint16 {
	return m.LengthInBitsConditional(false)
}

func (m *State) LengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// Simple field (initCommand)
	lengthInBits += 1

	// Simple field (updCommand)
	lengthInBits += 1

	// Simple field (timestampAdded)
	lengthInBits += 1

	// Simple field (highPriorityCommand)
	lengthInBits += 1

	// Simple field (systemCommand)
	lengthInBits += 1

	// Simple field (adsCommand)
	lengthInBits += 1

	// Simple field (noReturn)
	lengthInBits += 1

	// Simple field (response)
	lengthInBits += 1

	// Simple field (broadcast)
	lengthInBits += 1

	// Reserved Field (reserved)
	lengthInBits += 7

	return lengthInBits
}

func (m *State) LengthInBytes() uint16 {
	return m.LengthInBits() / 8
}

func StateParse(io *utils.ReadBuffer) (*State, error) {

	// Simple Field (initCommand)
	initCommand, _initCommandErr := io.ReadBit()
	if _initCommandErr != nil {
		return nil, errors.Wrap(_initCommandErr, "Error parsing 'initCommand' field")
	}

	// Simple Field (updCommand)
	updCommand, _updCommandErr := io.ReadBit()
	if _updCommandErr != nil {
		return nil, errors.Wrap(_updCommandErr, "Error parsing 'updCommand' field")
	}

	// Simple Field (timestampAdded)
	timestampAdded, _timestampAddedErr := io.ReadBit()
	if _timestampAddedErr != nil {
		return nil, errors.Wrap(_timestampAddedErr, "Error parsing 'timestampAdded' field")
	}

	// Simple Field (highPriorityCommand)
	highPriorityCommand, _highPriorityCommandErr := io.ReadBit()
	if _highPriorityCommandErr != nil {
		return nil, errors.Wrap(_highPriorityCommandErr, "Error parsing 'highPriorityCommand' field")
	}

	// Simple Field (systemCommand)
	systemCommand, _systemCommandErr := io.ReadBit()
	if _systemCommandErr != nil {
		return nil, errors.Wrap(_systemCommandErr, "Error parsing 'systemCommand' field")
	}

	// Simple Field (adsCommand)
	adsCommand, _adsCommandErr := io.ReadBit()
	if _adsCommandErr != nil {
		return nil, errors.Wrap(_adsCommandErr, "Error parsing 'adsCommand' field")
	}

	// Simple Field (noReturn)
	noReturn, _noReturnErr := io.ReadBit()
	if _noReturnErr != nil {
		return nil, errors.Wrap(_noReturnErr, "Error parsing 'noReturn' field")
	}

	// Simple Field (response)
	response, _responseErr := io.ReadBit()
	if _responseErr != nil {
		return nil, errors.Wrap(_responseErr, "Error parsing 'response' field")
	}

	// Simple Field (broadcast)
	broadcast, _broadcastErr := io.ReadBit()
	if _broadcastErr != nil {
		return nil, errors.Wrap(_broadcastErr, "Error parsing 'broadcast' field")
	}

	// Reserved Field (Compartmentalized so the "reserved" variable can't leak)
	{
		reserved, _err := io.ReadInt8(7)
		if _err != nil {
			return nil, errors.Wrap(_err, "Error parsing 'reserved' field")
		}
		if reserved != int8(0x0) {
			log.Info().Fields(map[string]interface{}{
				"expected value": int8(0x0),
				"got value":      reserved,
			}).Msg("Got unexpected response.")
		}
	}

	// Create the instance
	return NewState(initCommand, updCommand, timestampAdded, highPriorityCommand, systemCommand, adsCommand, noReturn, response, broadcast), nil
}

func (m *State) Serialize(io utils.WriteBuffer) error {

	// Simple Field (initCommand)
	initCommand := bool(m.InitCommand)
	_initCommandErr := io.WriteBit((initCommand))
	if _initCommandErr != nil {
		return errors.Wrap(_initCommandErr, "Error serializing 'initCommand' field")
	}

	// Simple Field (updCommand)
	updCommand := bool(m.UpdCommand)
	_updCommandErr := io.WriteBit((updCommand))
	if _updCommandErr != nil {
		return errors.Wrap(_updCommandErr, "Error serializing 'updCommand' field")
	}

	// Simple Field (timestampAdded)
	timestampAdded := bool(m.TimestampAdded)
	_timestampAddedErr := io.WriteBit((timestampAdded))
	if _timestampAddedErr != nil {
		return errors.Wrap(_timestampAddedErr, "Error serializing 'timestampAdded' field")
	}

	// Simple Field (highPriorityCommand)
	highPriorityCommand := bool(m.HighPriorityCommand)
	_highPriorityCommandErr := io.WriteBit((highPriorityCommand))
	if _highPriorityCommandErr != nil {
		return errors.Wrap(_highPriorityCommandErr, "Error serializing 'highPriorityCommand' field")
	}

	// Simple Field (systemCommand)
	systemCommand := bool(m.SystemCommand)
	_systemCommandErr := io.WriteBit((systemCommand))
	if _systemCommandErr != nil {
		return errors.Wrap(_systemCommandErr, "Error serializing 'systemCommand' field")
	}

	// Simple Field (adsCommand)
	adsCommand := bool(m.AdsCommand)
	_adsCommandErr := io.WriteBit((adsCommand))
	if _adsCommandErr != nil {
		return errors.Wrap(_adsCommandErr, "Error serializing 'adsCommand' field")
	}

	// Simple Field (noReturn)
	noReturn := bool(m.NoReturn)
	_noReturnErr := io.WriteBit((noReturn))
	if _noReturnErr != nil {
		return errors.Wrap(_noReturnErr, "Error serializing 'noReturn' field")
	}

	// Simple Field (response)
	response := bool(m.Response)
	_responseErr := io.WriteBit((response))
	if _responseErr != nil {
		return errors.Wrap(_responseErr, "Error serializing 'response' field")
	}

	// Simple Field (broadcast)
	broadcast := bool(m.Broadcast)
	_broadcastErr := io.WriteBit((broadcast))
	if _broadcastErr != nil {
		return errors.Wrap(_broadcastErr, "Error serializing 'broadcast' field")
	}

	// Reserved Field (reserved)
	{
		_err := io.WriteInt8(7, int8(0x0))
		if _err != nil {
			return errors.Wrap(_err, "Error serializing 'reserved' field")
		}
	}

	return nil
}

func (m *State) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var token xml.Token
	var err error
	foundContent := false
	for {
		token, err = d.Token()
		if err != nil {
			if err == io.EOF && foundContent {
				return nil
			}
			return err
		}
		switch token.(type) {
		case xml.StartElement:
			foundContent = true
			tok := token.(xml.StartElement)
			switch tok.Name.Local {
			case "initCommand":
				var data bool
				if err := d.DecodeElement(&data, &tok); err != nil {
					return err
				}
				m.InitCommand = data
			case "updCommand":
				var data bool
				if err := d.DecodeElement(&data, &tok); err != nil {
					return err
				}
				m.UpdCommand = data
			case "timestampAdded":
				var data bool
				if err := d.DecodeElement(&data, &tok); err != nil {
					return err
				}
				m.TimestampAdded = data
			case "highPriorityCommand":
				var data bool
				if err := d.DecodeElement(&data, &tok); err != nil {
					return err
				}
				m.HighPriorityCommand = data
			case "systemCommand":
				var data bool
				if err := d.DecodeElement(&data, &tok); err != nil {
					return err
				}
				m.SystemCommand = data
			case "adsCommand":
				var data bool
				if err := d.DecodeElement(&data, &tok); err != nil {
					return err
				}
				m.AdsCommand = data
			case "noReturn":
				var data bool
				if err := d.DecodeElement(&data, &tok); err != nil {
					return err
				}
				m.NoReturn = data
			case "response":
				var data bool
				if err := d.DecodeElement(&data, &tok); err != nil {
					return err
				}
				m.Response = data
			case "broadcast":
				var data bool
				if err := d.DecodeElement(&data, &tok); err != nil {
					return err
				}
				m.Broadcast = data
			}
		}
	}
}

func (m *State) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	className := "org.apache.plc4x.java.ads.readwrite.State"
	if err := e.EncodeToken(xml.StartElement{Name: start.Name, Attr: []xml.Attr{
		{Name: xml.Name{Local: "className"}, Value: className},
	}}); err != nil {
		return err
	}
	if err := e.EncodeElement(m.InitCommand, xml.StartElement{Name: xml.Name{Local: "initCommand"}}); err != nil {
		return err
	}
	if err := e.EncodeElement(m.UpdCommand, xml.StartElement{Name: xml.Name{Local: "updCommand"}}); err != nil {
		return err
	}
	if err := e.EncodeElement(m.TimestampAdded, xml.StartElement{Name: xml.Name{Local: "timestampAdded"}}); err != nil {
		return err
	}
	if err := e.EncodeElement(m.HighPriorityCommand, xml.StartElement{Name: xml.Name{Local: "highPriorityCommand"}}); err != nil {
		return err
	}
	if err := e.EncodeElement(m.SystemCommand, xml.StartElement{Name: xml.Name{Local: "systemCommand"}}); err != nil {
		return err
	}
	if err := e.EncodeElement(m.AdsCommand, xml.StartElement{Name: xml.Name{Local: "adsCommand"}}); err != nil {
		return err
	}
	if err := e.EncodeElement(m.NoReturn, xml.StartElement{Name: xml.Name{Local: "noReturn"}}); err != nil {
		return err
	}
	if err := e.EncodeElement(m.Response, xml.StartElement{Name: xml.Name{Local: "response"}}); err != nil {
		return err
	}
	if err := e.EncodeElement(m.Broadcast, xml.StartElement{Name: xml.Name{Local: "broadcast"}}); err != nil {
		return err
	}
	if err := e.EncodeToken(xml.EndElement{Name: start.Name}); err != nil {
		return err
	}
	return nil
}

func (m State) String() string {
	return string(m.Box("State", utils.DefaultWidth*2))
}

func (m State) Box(name string, width int) utils.AsciiBox {
	if name == "" {
		name = "State"
	}
	boxes := make([]utils.AsciiBox, 0)
	boxes = append(boxes, utils.BoxAnything("InitCommand", m.InitCommand, width-2))
	boxes = append(boxes, utils.BoxAnything("UpdCommand", m.UpdCommand, width-2))
	boxes = append(boxes, utils.BoxAnything("TimestampAdded", m.TimestampAdded, width-2))
	boxes = append(boxes, utils.BoxAnything("HighPriorityCommand", m.HighPriorityCommand, width-2))
	boxes = append(boxes, utils.BoxAnything("SystemCommand", m.SystemCommand, width-2))
	boxes = append(boxes, utils.BoxAnything("AdsCommand", m.AdsCommand, width-2))
	boxes = append(boxes, utils.BoxAnything("NoReturn", m.NoReturn, width-2))
	boxes = append(boxes, utils.BoxAnything("Response", m.Response, width-2))
	boxes = append(boxes, utils.BoxAnything("Broadcast", m.Broadcast, width-2))
	return utils.BoxBox(name, utils.AlignBoxes(boxes, width-2), 0)
}
